1、关心你的技艺 
2、思考！你的工作 
3、提供各种选择，不要找蹩脚的借口 
4、不要容忍破窗户 
5、做变化的催化剂 
6、记住大图景 
7、使质量成为需求问题 
8、定期为你的知识资产投资 
9、批判地分析你读到的和听到的 
10、你说什么和你怎么说同样重要 
11、DRY原则——不要重复你自己 
12、让复用变得容易 
13、消除无关事物之间的影响 
14、不存在最终决策 
15、用曳光弹找到目标 
16、为了学习而制作原型 
17、靠近问题领域编程 
18、估算，以避免发生意外 
19、通过代码对进度表进行迭代 
20、用纯文本保存知识 
21、利用命令shell的力量 
22、用好一种编辑器 
23、总是使用源码控制 
24、要修正问题，而不是发出指责 
25、不要恐慌 
26、"Select"没有问题 
27、不要假定，要证明 
28、学习一种文本操作语言 
29、编写能编写代码的代码 
30、你不可能写出完美的软件 
31、通过合约进行设计 
32、早崩溃 
33、如果它不可能发生，用断言确保它不会发生 
34、将异常用于异常的问题 
35、要有始有终 
36、使模块之间的耦合减至最少 
37、要配置，不要集成 
38、将抽象放进代码，细节放进元数据 
39、分析工作流，以改善并发性 
40、用服务进行设计 
41、总是为并发进行设计 
42、使视图与模型分离 
43、用黑板协调工作流 
44、不要靠巧合编程 
45、估算你的算法的阶 
46、测试你的估算 
47、早重构，常重构 
48、为测试而设计 
49、测试你的软件，否则你的用户就得测试 
50、不要使用你不理解的向导代码 
51、不要搜集需求——挖掘它们 
52、与用户一同工作，以像用户一样思考 
53、抽象比细节活得更长久 
54、使用项目词汇表 
55、不要在盒子外面思考——要找到盒子 
56、倾听反复出现的疑虑——等你准备好再开始 
57、对有些事情"做"胜于"描述" 
58、不要做形式方法的奴隶 
59、昂贵的工具不一定能制作出更好的设计 
60、围绕功能、而不是工作职务进行组织 
61、不要使用手工流程 
62、早测试，常测试，自动测试。 
63、要等到通过全部测试，编码才算完成 
64、通过"蓄意破坏"测试你的测试 
65、测试状态覆盖，而不是代码覆盖 
66、一个bug只抓一次 
67、把英语当作又一种编程语言 
68、把文档建在里面，不要拴在外面 
69、温和地超出用户的期望 
70、在你的作品上签名 
